"### MAIN SETTINGS
set expandtab
set tabstop=2
set shiftwidth=2
set number
set cc=80

set wrap
set tw=80
set breakindent
let &showbreak=' '

set laststatus=2
set clipboard=unnamed
set bs=2
set foldmethod=manual
let mapleader =' '

"### KEYMAPS
map <C-l> :NERDTreeToggle<CR>
map <C-t> :FZF<CR>
nnoremap <leadermv ddGp``

"### NERDTREE
let g:NERDTreeQuitOnOpen=1
let g:NERDTreeIfnore= ['^node_modules$']

"### SOLARIZED
set background=dark
colorscheme solarized8_high

"### PLUGINS
call plug#begin('~/.vim/plugged')
  Plug 'vim-airline/vim-airline'
  Plug 'tpope/vim-commentary'
" Plug 'junegunn/vim-easy-align'
  Plug 'scrooloose/nerdtree'
" Plug 'terryma/vim-multiple-cursors'
" Plug 'tpope/vim-obsession'
" Plug 'tpope/vim-surround'
" Plug 'mattn/emmet-vim'
" Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

	Plug 'dense-analysis/ale'
call plug#end()

"### ALE
	"let g:ale_linters = {
	" \	'javascript': ['eslint'],
	" \ 'react': ['eslint'],
	" \	'typescript': ['eslint'],
	" \}

let g:ale_fixers = {
	\	'*': ['remove_trailing_lines', 'trim_whitespace'],
	\	'javascript': ['prettier', 'eslint'],
	\	'react': ['prettier', 'eslint'],
	\	'typescript': ['prettier', 'eslint'],
	\	'html': ['prettier'],
	\	'css': ['prettier'],
	\	'json': ['prettier'],
	\	'yaml': ['prettier'],
\}
let g:ale_fix_on_save = 1
let g:ale_lint_on_text_changed = 'never'
let
let g:ale_lint_on_enter = 0
let g:airline#extensions#ale#enabled = 1
let g:airline_extensions = []

let g:ale_completion_enabled = 1
set omnifunc=ale#completion#OmniFunc

"--- CUSTOMIZATION
"NUMBERED TABS
fu! MyTabLabel(n)
	let buflist = tabpagebuflist(a:n)
	let winnr = tabpagewinnr(a:n)
	let string = fnamemodify(bufname(buflist[winnr - 1]), ':t')
	return empty(string) ? '[unnamed]' : string
endfu
fu! MyTabLine()
	let s = ''
	for i in range(tabpagenr('$'))
		"select the highlighting
		if i + 1 == tabpagenr()
			let s .= '%#TabLineSel#'
		else
			let s .= '%#TabLine#'
    endif
    " set the tab page number (for mouse clicks)
    "let s .= '%' . (i + 1) . 'T'
    " display tabnumber (for use with <count>gt, etc)
    let s .= ' '. (i+1) . ' '
    " the label is made by MyTabLabel()
    let s .= ' %{MyTabLabel(' . (i + 1) . ')} '
    if i+1 < tabpagenr('$')
			let s .= ' |'
    endif
	endfor
	return s
endfu
set tabline=%!MyTabLine()

"REMEMBER FOLDS
augroup remember_folds
	autocmd!
	autocmd BufWinLeave * mkview
  autocmd BufWinEnter * silent! loadview
augroup END

